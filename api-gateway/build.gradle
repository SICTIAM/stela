plugins {
    id "com.moowork.node" version "1.1.1"
}

jar {
    baseName = 'api-gateway'
    archiveName = 'api-gateway.jar'
}

node {
    version = '6.5.0'
    npmVersion = '3.10.6'
    download = true
}

dependencies {
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.cloud:spring-cloud-starter-zuul')
    compile('org.springframework.cloud:spring-cloud-starter-hystrix')
    compile('org.springframework.cloud:spring-cloud-starter-security')
    compile("org.springframework.retry:spring-retry")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('com.ozwillo:ozwillo-java-spring-integration:1.25.3')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

springBoot {
    // exclude Spring Boot Devtools from the fat jar
    excludeDevtools = true

    executable = true
    embeddedLaunchScriptProperties =
            [initInfoDescription: 'STELA 3 API Gateway',
             initInfoShortDescription: 'API Gateway',
             initInfoProvides: 'api-gateway']
}

configure(tasks.processResources) {
    // we don't want source JSX in the jar, we only need their transpiled, bundled version in build/
    exclude 'jsx/'
    exclude 'build/'
    exclude 'styles/'
}

task frontBundle(type: NpmTask) {
    args = ['run', 'build']
    doLast {
        copy {
            from "${sourceSets.main.resources.srcDirs[0]}/build/static"
            into "${sourceSets.main.output.resourcesDir}/public/static"
        }
        copy {
            from "${sourceSets.main.resources.srcDirs[0]}/build/index.html"
            into "${sourceSets.main.output.resourcesDir}/public/"
        }
        copy {
            from "${sourceSets.main.resources.srcDirs[0]}/build/asset-manifest.json"
            into "${sourceSets.main.output.resourcesDir}/public/"
        }
    }
}

jar.dependsOn(frontBundle)
frontBundle.dependsOn(npmInstall)
