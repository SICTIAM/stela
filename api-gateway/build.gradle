buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

plugins {
    id "com.moowork.node" version "1.1.1"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

jar {
    baseName = 'api-gateway'
    archiveName = 'api-gateway.jar'
}

node {
    version = '6.5.0'
    npmVersion = '3.10.6'
    download = true
}

repositories {
    mavenCentral()
}


ext {
    springCloudVersion = 'Dalston.RELEASE'
}

dependencies {
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.cloud:spring-cloud-starter-zuul')
    compile('org.springframework.cloud:spring-cloud-starter-feign')
    compile('org.springframework.cloud:spring-cloud-starter-hystrix')
    compile('org.springframework.security.oauth:spring-security-oauth2')
    compile('org.springframework.cloud:spring-cloud-starter-security')
    compile("org.springframework.retry:spring-retry")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

bootRun {
    addResources = true
}

springBoot {
    // exclude Spring Boot Devtools from the fat jar
    excludeDevtools = true

    executable = true
    embeddedLaunchScriptProperties =
            [initInfoDescription: 'STELA 3 API Gateway',
             initInfoShortDescription: 'API Gateway',
             initInfoProvides: 'api-gateway']
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

configure(tasks.processResources) {
    // we don't want source JSX in the jar, we only need their transpiled, bundled version in build/
    exclude 'jsx/'
    exclude 'build/'
    exclude 'styles/'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

task image(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

task frontBundle(type: NpmTask) {
    args = ['run', 'build']
    doLast {
        copy {
            from "${sourceSets.main.resources.srcDirs[0]}/build/static"
            into "${sourceSets.main.output.resourcesDir}/public/static"
        }
        copy {
            from "${sourceSets.main.resources.srcDirs[0]}/build/index.html"
            into "${sourceSets.main.output.resourcesDir}/public/"
        }
        copy {
            from "${sourceSets.main.resources.srcDirs[0]}/build/asset-manifest.json"
            into "${sourceSets.main.output.resourcesDir}/public/"
        }
    }
}

jar.dependsOn(frontBundle)
frontBundle.dependsOn(npmInstall)
