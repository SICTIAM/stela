buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        ktVersion = "1.2.71"
    }
    repositories {
        mavenCentral()
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

// Add a taskTree task to display, as its name implies, the dependency tree of a given task
// eg ./gradlew bootRun taskTree
plugins {
    id "com.dorongold.task-tree" version "1.3.1"
    id 'com.palantir.git-version' version "0.12.0-rc2"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'docker'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
        maven {
            // docker-compose-rule is published on bintray
            url 'https://dl.bintray.com/palantir/releases'
        }
        maven {
            url 'https://ec.europa.eu/cefdigital/artifact/content/groups/public'
        }
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-mail')
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile('ch.qos.logback:logback-classic:1.2.3')
        compile("org.jetbrains.kotlin:kotlin-stdlib:$ktVersion")
        compile("org.jetbrains.kotlin:kotlin-reflect:$ktVersion")
        compile('xyz.capybara:clamav-client:2.0.1')
        compile('com.jayway.jsonpath:json-path:2.4.0')
        compile('io.jsonwebtoken:jjwt:0.9.0')
        runtime('org.springframework.boot:spring-boot-devtools')
        runtime('org.flywaydb:flyway-core')
        // used by logback for conditional logging
        runtime('org.codehaus.janino:janino:3.0.6')
        testCompile('junit:junit:4.12')
        testCompile('com.palantir.docker.compose:docker-compose-rule-junit4:0.34.0')
        testCompile('com.icegreen:greenmail:1.5.5')
        testCompile('org.apache.commons:commons-email:1.4')
    }

    ext {
        // need Greenwich for SB 2.1.x compatibility, upgrade to SR version when available
        springCloudVersion = 'Greenwich.RC1'
    }

    bootRun {
        environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "dev"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    if (project.name.endsWith('service') || project.name == "api-gateway") {

        // Private task, should be called from outside
        task tagGitHash(type: Docker, dependsOn: build) {

            def gitDetails = versionDetails()
            registry = 'forge-registry.sictiam.fr/internet'
            push = project.hasProperty('push')

            // Specific case for integration : avoid tagging images with hash => generates too many image tags.. Keep "latest" tag
            def env = project.getProperty("env")
            tagVersion = env == "prod" ? env + "-" + gitDetails.gitHashFull : env

            applicationName = 'stela-poc/' + jar.baseName
            dockerfile = file('src/main/docker/Dockerfile')
            doFirst {
                copy {
                    from jar
                    into stageDir
                }
                copy {
                    from("${gradle.gradleUserHomeDir}/../.ssh/id_rsa")
                    into stageDir
                }
            }
        }

        task image(type: Docker, dependsOn: tagGitHash) {
            registry = 'forge-registry.sictiam.fr/internet'
            push = project.hasProperty('push')
            applicationName = 'stela-poc/' + jar.baseName
            dockerfile = file('src/main/docker/Dockerfile')
            tagVersion = project.hasProperty("env") ? project.getProperty("env") : "latest"
        }
    }
}
